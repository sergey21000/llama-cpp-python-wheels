name: Build and Release Wheels (glibc)

on: workflow_dispatch

permissions:
  contents: write

jobs:
  build_wheels:
    name: Build wheels
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout llama-cpp-python
        uses: actions/checkout@v4
        with:
          repository: abetlen/llama-cpp-python
          path: .
          ref: main
          submodules: recursive
          
      - name: Clean any existing build files
        run: |
          rm -rf build/ dist/ *.so *.egg-info
          find . -name "*.so" -delete
          find . -name "*.o" -delete

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install uv wheel
          python -m uv pip install -e .[all] --verbose

      - name: Build wheels with glibc
        uses: pypa/cibuildwheel@v2.22.0
        env:
          CIBW_BUILD: "cp311-* cp312-*"
          CIBW_PLATFORM: "linux"
          CIBW_MANYLINUX_X86_64_IMAGE: "quay.io/pypa/manylinux2014_x86_64"
          CIBW_ENVIRONMENT: "LLAMA_BUILD_SERVER=0 AUDITWHEEL_PLAT=manylinux2014_x86_64"
          CIBW_SKIP: "musllinux_*"
          CIBW_BEFORE_BUILD: "pip install -r requirements.txt"
          CIBW_BEFORE_ALL: "yum install -y libstdc++-static || apt-get install -y libstdc++6"
          CIBW_REPAIR_WHEEL_COMMAND: >
            auditwheel repair --plat manylinux2014_x86_64 -w {dest_dir} {wheel} ||
            echo "Warning: auditwheel repair failed, but continuing anyway"
        with:
          package-dir: .
          output-dir: wheelhouse

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-glibc
          path: ./wheelhouse/*.whl

  release:
    name: Release
    needs: [build_wheels]
    runs-on: ubuntu-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: wheels-glibc
          path: dist

      - name: Extract version from wheel
        id: extract_version
        run: |
          WHEEL_NAME=$(ls dist/*.whl | head -n 1)
          VERSION=$(echo "$WHEEL_NAME" | grep -oP 'llama_cpp_python-\K\d+\.\d+\.\d+')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Release wheels
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          tag_name: v${{ steps.extract_version.outputs.version }}-glibc
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
